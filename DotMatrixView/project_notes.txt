Project notes
=============

NEXT: Implement decrement action on digits and make sure it affects other digits in the group. 

The digits need pluggable increment/decrement rules so that one digit can signal it's neighbours to go up or down
regardless whether that digit represents minutes, tens of minutes, hours or tens of hours.
Once these rules are in place it will effectively be a clock, lacking only a mechanism to accurately update in
synchronisation with the system time!

Current experimental direction: I want to make the display able to update itself given the time. This will
involve parsing a string in the format "00:00".
The permissable format for a set of digits needs to take into account which digits go all the way round e.g. individual minutes
and which only go up to 5 before reset e.g. tens of minutes in an hour. You could initialise a parser with a string like 59:59
to indicate a pair for minutes and a pair for seconds.
What about hours? These operate differently depending upon their partner. the left digit can be up to 9 if the right digit
is 0 or 1, but only goes to 3 if it is a 2. In the 12 hour clock the left can go to 9 if the right is a 0 but only up to 2
if the right is a 1. In 24 hour, hour 23 increments to 00, but in the 12 hour, 12 increments to 01.

Decide your next experimental direction. Options:
 	Go further with the display piece
 		Build the relation between the digits
 			Decrement, start with a time period, count down, reflecting the correct changes across all digits
 					Set up the digits in relation to each other, and signal them properly
 				or
 					Calculate the correct current value from an offset off the time when it started, and every
 					time the display is scheduled to update figure it out again. This is closer to the final product but the
 					alternative is perhaps more in line with other uses of the display?
 					Actually perhaps what it really needs is the ability to update itself based on being given a new string
 					and figuring out what the changes are from the current string?
 		Improve the animation
 			Try 3.0-style property animations
 		Colour changes
 			The countdown will need to be change the dots from green to orange (nearly out) and red (overrun)
 			Consider colours that will look good on a white background. 
 		Build up the segmented display to the same functionality
 			Can set a number
 			Animates to the set number
 			Build segments using a PathDrawable instead of images
 			Build segment animations using lists instead (flip-pad animation)
 		Build dot-array digit from code not XML
 			Construct the arrangement of views in code
 			Given the width and height, figure out which are the active dots
 			Build a single array of dots for all the digits in the display, then let
 			each digit construct itself by figuring out which dots it should own.
 	Figure out the time piece
 		How will update of the display be scheduled to happen
 			When the activity is visible
 			When in the background? Should there be a background service at all?
 	Build some UI
 		Connect time display with buttons to set the ending time.
 			Might you show both the ending time and the count-down on the screen together?
 	Learn to get appointment times from the calendar content provider
 
 Idea: you could build something in code that is conceptually similar to a real LCD using FrameLayout
 Top of stack:		Shape drawable rectangle whose colour is black and of variable transparency
 					Image file that is a black square with a transparent circle in the middle
 Bottom of stack:	A shape drawable rectangle of whatever colour you want the display to show when lit.
 
 You don't really need the top item above, because you can make the same adjustments at the bottom layer.
 You could use a different mask image to change the shape of the dots, e.g. use snow-flakes around Christmas
 		
 		

The alpha transition makes the spots disappear right down to the background.
	Change it to not go all the way down to zero - it might look passable.
	Make a 3.0-style property animation that takes the colour down to the dim colour.
	Do the shadow properties work on shape drawables?
	
Learn how to target multiple SDK levels so I can optionally use view or property animation.

Make the digits build in code with arbitrary sizes:
	build the original matrices
	build the co-ordinates of the digit parts, spacers and colon
	arguments for building a matrix:
		dots wide
		dots high
		dot size
		spacer width
	
	Should this actually just construct a matrix big enough for the full display, with the
	digits being indexes to items within it?
	
Try building a ShapeDrawable using a Path. The point of the experiment is to see if you can
change the fill colour of such a drawable dynamically, and if so, if the colour can be the
subject of a property animation.
		
	
An eight - all elements on - looks like this:
	    1, 2, 3, 4, 5,
	 7,               13,
	14,               20,
	21,               27,
	28,               34,
	35,               41,
	   43,44,45,46,47,
	49,               55,
	56,               62,
	63,               69,
	70,               76,
	77,               83,
	   85,86,87,88,89