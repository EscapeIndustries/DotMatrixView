Project notes
=============
Goal: Finish off the MatrixDisplay version, aiming to make it a basic component that can be used easily via XML.
NEXT: XML - change pixels for dimensions?

Release planning
----------------
The most important goal right now is to get the code for the View library onto GitHub. What needs to be done
to make that happen?
[X] Merge the surfaceview_alternative branch into master
[X] Remove all the classes that are not needed for the SurfaceView based solution
[ ] Read ALL the remaining code and comment anything that isn't obvious
[ ] Add JavaDoc comments to all the public bits, including the interfaces
[ ] Spend some time on GitHub getting a feel for how other Android projects are structured
    [ ] Should the test client be part of the GitHub project?
    [ ] Should the unit tests be part of the GitHub project?

Thoughts and requirements for building the dot array in code instead of XML:
		Why do I want to do this?
			Because I want more flexible sizes of dots and of the overall control.
				This is what I would expect of a re-useable view.
			It feels like a step towards being able to have more dots than are needed to allow scrolling (horizontal or vertical)
				Scrolling would be a nice visual effect. It would also be useful for touch events, horizontally or vertically showing
				higher and lower values to the left and right/above and below.
		What parts will I need to build to make it work?
			build the view objects based on parameters
			build the digit definitions based on parameters
				define the digits by the parts they are made of
				build the definition of the parts in code
					this approach allows more parts to be defined later
					how do non-digit-width parts like spacers and colons play into this?
				scaling factors - parts know they should take up all the dots available within constraints
					when the digit width is wider, say 21 instead of current 7, the vertical lines should be
					2 or even 3 dots wide
						grids should be divided into proportions. A horizontal is 1 unit of that high and 5 units wide, a vertical
						is 5 of that unit high and 1 unit wide. Spacers are 1 unit. So the dots of a colon would be 1 unit by 1 unit.
					the proportions themselves can be changed? allowing normal, thin or fat characters.

Decide your next experimental direction. Options:
 	Go further with the display piece
 		Touch events
 			The display will need some way to be set to the starting value. I could use vertical dragging to 
 			increment and decrement a digit. While dragging, the digit could slide down a row of dots at a time,
 			with the next higher/lower appearing a row at a time from the top or bottom. If you get beyond a
 			certain number of rows and let go, it will complete the slide in with a springing velocity. If you
 			let go at less than those rows, the current value would spring back. A drag should be effective as a long 
 			motion well beyond the top or bottom of the digit itself - just like the time and date picker dialog in ICS.
 			
 			Figuring out which bit of a digit should show when sliding could be accomplished by working out an index offset
 			against the digit definitions. For example, if a digit was sliding in from the top, and was 2 rows in, which
 			figuring out which dots to turn on, the digit patter values would need to have 11 (of 13) rows subtracted for
 			their destination dots. The index offset would be the index of the start of row 12 (of 13).
 		Build dot-array digit from code not XML
 			Given the width and height, figure out which are the active dots
 	Figure out the time piece
 		How will update of the display be scheduled to happen
 			When the activity is visible
 			When in the background? Should there be a background service at all?
 		Calculate the current value offset from the start time and the current time
 			Calculate the correct current value from an offset off the time when it started, and every
 			time the display is scheduled to update figure it out again.
 	Build some UI
 		Connect time display with buttons to set the ending time.
 			Might you show both the ending time and the count-down on the screen together?
 	Learn to get appointment times from the calendar content provider
 	Use it to make a clock widget
 
Make the digits build in code with arbitrary sizes:
	build the original matrices
	build the co-ordinates of the digit parts, spacers and colon
	arguments for building a matrix:
		dots wide
		dots high
		dot size
		spacer width
	
	Should this actually just construct a matrix big enough for the full display, with the
	digits being indexes to items within it?
	
An eight - all elements on - looks like this:
	    1, 2, 3, 4, 5,
	 7,               13,
	14,               20,
	21,               27,
	28,               34,
	35,               41,
	   43,44,45,46,47,
	49,               55,
	56,               62,
	63,               69,
	70,               76,
	77,               83,
	   85,86,87,88,89
	   
Some code I was working on in GridActivity while trying to learn how to change the colour of an existing
ShapeDrawable in an ImageView:
		ImageView v = (ImageView) findViewById(R.id.testDot);
		GradientDrawable d = (GradientDrawable) v.getDrawable();
		d.mutate();
		d.setColor(getResources().getColor(R.color.bright_red));
		v.setImageDrawable(d);
		
		ViewGroup holder = (ViewGroup)findViewById(R.id.holder);
		ShapeDrawable s = new ShapeDrawable();
		s.setBounds(1, 1, 30, 30);
The use of the GradientDrawable and its mutate() method came from reading:
	http://stackoverflow.com/questions/5940825/android-change-shape-color-in-runtime
