Project notes
=============
Goal: Finish off the MatrixDisplay version, aiming to make it a basic component that can be used easily via XML.
NEXT: Consider something that wants to use the view to draw from any grid to any grid - such as a Conway's Game Of Life app. I'm thinking
	  this would just need a new sub-class of Glyph. Is that correct? Do the names in the interfaces still work?
BUG:  Combine static value updater and countdown color change and the colors don't change.

Decide your next experimental direction. Options:
 	Go further with the display piece
 		Scalable digit definitions
 			Allow digits to draw using more or fewer dots. This would require a digit definition that calculated its own
 			1-dimensional coordinates based on dots available for height and width, based on some basic proportions. Not
 			only would they extend in number of dots used for height and width but they might make the lines thicker
 			using more than one line of dots.
 		Touch events
 			The display will need some way to be set to the starting value. I could use vertical dragging to 
 			increment and decrement a digit. While dragging, the digit could slide down a row of dots at a time,
 			with the next higher/lower appearing a row at a time from the top or bottom. If you get beyond a
 			certain number of rows and let go, it will complete the slide in with a springing velocity. If you
 			let go at less than those rows, the current value would spring back. A drag should be effective as a long 
 			motion well beyond the top or bottom of the digit itself - just like the time and date picker dialog in ICS.
 			
 			Figuring out which bit of a digit should show when sliding could be accomplished by working out an index offset
 			against the digit definitions. For example, if a digit was sliding in from the top, and was 2 rows in, which
 			figuring out which dots to turn on, the digit patter values would need to have 11 (of 13) rows subtracted for
 			their destination dots. The index offset would be the index of the start of row 12 (of 13).
 		Build dot-array digit from code not XML
 			Given the width and height, figure out which are the active dots
 		Calculate the current value offset from the start time and the current time
 			Calculate the correct current value from an offset off the time when it started, and every
 			time the display is scheduled to update figure it out again.
 	Build some UI
 		Connect time display with buttons to set the ending time.
 			Might you show both the ending time and the count-down on the screen together?
 	Learn to get appointment times from the calendar content provider
 	Use it to make a clock widget

Example of the 1-dimensional coordinate system
----------------------------------------------	
An eight - all elements on - looks like this:
	    1, 2, 3, 4, 5,
	 7,               13,
	14,               20,
	21,               27,
	28,               34,
	35,               41,
	   43,44,45,46,47,
	49,               55,
	56,               62,
	63,               69,
	70,               76,
	77,               83,
	   85,86,87,88,89
	   
Some code I was working on in GridActivity while trying to learn how to change the colour of an existing
ShapeDrawable in an ImageView:
		ImageView v = (ImageView) findViewById(R.id.testDot);
		GradientDrawable d = (GradientDrawable) v.getDrawable();
		d.mutate();
		d.setColor(getResources().getColor(R.color.bright_red));
		v.setImageDrawable(d);
		
		ViewGroup holder = (ViewGroup)findViewById(R.id.holder);
		ShapeDrawable s = new ShapeDrawable();
		s.setBounds(1, 1, 30, 30);
The use of the GradientDrawable and its mutate() method came from reading:
	http://stackoverflow.com/questions/5940825/android-change-shape-color-in-runtime
